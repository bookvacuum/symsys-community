{
	"type": "pointsBuilder",
	"nodes": {
		"output1": {
			"type": "output",
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"node": "attribute2",
					"output": "val"
				},
				{
					"index": 3,
					"node": "disk1",
					"output": "float"
				},
				null,
				{
					"index": 5,
					"node": "mult1",
					"output": "product"
				}
			]
		},
		"globals1": {
			"type": "globals"
		},
		"constant_point_size": {
			"type": "constant",
			"params": {
				"float": 0.003
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"disk1": {
			"type": "disk",
			"params": {
				"position": {
					"overriden_options": {}
				},
				"center": {
					"raw_input": [
						0.5,
						0.5
					],
					"overriden_options": {}
				},
				"radius": {
					"raw_input": 0.23,
					"overriden_options": {}
				},
				"feather": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals1",
					"output": "gl_PointCoord"
				}
			]
		},
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "hovered"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"mix1": {
			"type": "mix",
			"params": {
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"blend": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant_point_size",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant_point_size1",
					"output": "val"
				},
				{
					"index": 2,
					"node": "attribute1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					},
					{
						"name": "blend",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "mix",
						"type": "float"
					}
				]
			}
		},
		"globals2": {
			"type": "globals"
		},
		"vec3ToFloat1": {
			"type": "vec3ToFloat",
			"params": {
				"vec": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals2",
					"output": "position"
				}
			]
		},
		"compare1": {
			"type": "compare",
			"params": {
				"value0": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec3ToFloat1",
					"output": "y"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "float"
					},
					{
						"name": "value1",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "bool"
					}
				]
			}
		},
		"twoWaySwitch1": {
			"type": "twoWaySwitch",
			"params": {
				"condition": {
					"type": "boolean",
					"default_value": false,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"ifTrue": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.03
				},
				"ifFalse": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					},
					"raw_input": 0.09
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "compare1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "condition",
						"type": "bool"
					},
					{
						"name": "ifTrue",
						"type": "float"
					},
					{
						"name": "ifFalse",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant1": {
			"type": "constant",
			"params": {
				"type": 4,
				"color": [
					0,
					1,
					0.06666666666666667
				],
				"asColor": 1
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"constant2": {
			"type": "constant",
			"params": {
				"type": 4,
				"color": [
					1,
					0,
					0
				],
				"asColor": true
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		},
		"mix2": {
			"type": "mix",
			"params": {
				"value0": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"value1": {
					"type": "vector3",
					"default_value": [
						0,
						0,
						0
					],
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"blend": {
					"type": "float",
					"default_value": 0.5,
					"options": {
						"spare": true,
						"editable": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "constant1",
					"output": "val"
				},
				{
					"index": 1,
					"node": "constant2",
					"output": "val"
				},
				{
					"index": 2,
					"node": "attribute1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value0",
						"type": "vec3"
					},
					{
						"name": "value1",
						"type": "vec3"
					},
					{
						"name": "blend",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "mix",
						"type": "vec3"
					}
				]
			}
		},
		"texture1": {
			"type": "texture",
			"params": {
				"uv": {
					"overriden_options": {}
				},
				"blurPixelsCountX": {
					"overriden_options": {}
				},
				"blurPixelsCountY": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "globals2",
					"output": "uv"
				}
			]
		},
		"vec4ToFloat1": {
			"type": "vec4ToFloat",
			"params": {
				"vec": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "texture1",
					"output": "rgba"
				}
			]
		},
		"mult1": {
			"type": "mult",
			"params": {
				"mult0": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"mult1": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"mult2": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"maxInputsCount": 3,
			"inputs": [
				{
					"index": 0,
					"node": "mix1",
					"output": "mix"
				},
				{
					"index": 1,
					"node": "fitFrom01_1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "mult0",
						"type": "float"
					},
					{
						"name": "mult1",
						"type": "float"
					},
					{
						"name": "mult2",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "product",
						"type": "float"
					}
				]
			}
		},
		"fitFrom01_1": {
			"type": "fitFrom01",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false
					}
				},
				"destMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true
					}
				},
				"destMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"node": "vec4ToFloat1",
					"output": "w"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "destMin",
						"type": "float"
					},
					{
						"name": "destMax",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"constant_point_size1": {
			"type": "constant",
			"params": {
				"float": 0.011999999999999999
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"attribute2": {
			"type": "attribute",
			"params": {
				"name": "basecolor",
				"type": 2
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "vec3"
					}
				]
			}
		}
	},
	"params": {
		"alphaTest": 0.04,
		"texture1": {
			"type": "node_path",
			"default_value": "",
			"options": {
				"spare": true,
				"computeOnDirty": true,
				"cook": false,
				"dependentOnFoundNode": true,
				"nodeSelection": {
					"context": "cop"
				}
			},
			"raw_input": "../../COP/image_EARTH",
			"overriden_options": {
				"callback": "{}",
				"nodeSelection": "{\"context\":\"cop\"}"
			}
		}
	},
	"selection": [
		"constant_point_size1"
	],
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "/globe/MAT/pointsParticles-main",
			"type": "PointsMaterial",
			"name": "/globe/MAT/pointsParticles",
			"color": 16777215,
			"size": 1,
			"sizeAttenuation": true,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"colorWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680,
			"alphaTest": 0.04
		},
		"onBeforeCompileDataJSON": {
			"vertexShader": "uniform float size;\nuniform float scale;\n#include <common>\n\n\n\n// /globe/MAT/pointsParticles/fitFrom01_1\n//\n//\n// FIT\n//\n//\nfloat fit(float val, float srcMin, float srcMax, float destMin, float destMax){\n\tfloat src_range = srcMax - srcMin;\n\tfloat dest_range = destMax - destMin;\n\n\tfloat r = (val - srcMin) / src_range;\n\treturn (r * dest_range) + destMin;\n}\nvec2 fit(vec2 val, vec2 srcMin, vec2 srcMax, vec2 destMin, vec2 destMax){\n\treturn vec2(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y)\n\t);\n}\nvec3 fit(vec3 val, vec3 srcMin, vec3 srcMax, vec3 destMin, vec3 destMax){\n\treturn vec3(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z)\n\t);\n}\nvec4 fit(vec4 val, vec4 srcMin, vec4 srcMax, vec4 destMin, vec4 destMax){\n\treturn vec4(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z),\n\t\tfit(val.w, srcMin.w, srcMax.w, destMin.w, destMax.w)\n\t);\n}\n\n//\n//\n// FIT TO 01\n// fits the range [srcMin, srcMax] to [0, 1]\n//\nfloat fitTo01(float val, float srcMin, float srcMax){\n\tfloat size = srcMax - srcMin;\n\treturn (val - srcMin) / size;\n}\nvec2 fitTo01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitTo01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitTo01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z),\n\t\tfitTo01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01\n// fits the range [0, 1] to [destMin, destMax]\n//\nfloat fitFrom01(float val, float destMin, float destMax){\n\treturn fit(val, 0.0, 1.0, destMin, destMax);\n}\nvec2 fitFrom01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitFrom01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitFrom01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z),\n\t\tfitFrom01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01 TO VARIANCE\n// fits the range [0, 1] to [center - variance, center + variance]\n//\nfloat fitFrom01ToVariance(float val, float center, float variance){\n\treturn fitFrom01(val, center - variance, center + variance);\n}\nvec2 fitFrom01ToVariance(vec2 val, vec2 center, vec2 variance){\n\treturn vec2(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y)\n\t);\n}\nvec3 fitFrom01ToVariance(vec3 val, vec3 center, vec3 variance){\n\treturn vec3(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z)\n\t);\n}\nvec4 fitFrom01ToVariance(vec4 val, vec4 center, vec4 variance){\n\treturn vec4(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z),\n\t\tfitFrom01ToVariance(val.w, center.w, variance.w)\n\t);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute1\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/globals2\nuniform sampler2D texture_position;\n\n// /globe/MAT/pointsParticles/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n// /globe/MAT/pointsParticles/globals2\nvarying vec2 v_POLY_globals2_uv;\n\n// /globe/MAT/pointsParticles/attribute1\nattribute vec2 particles_sim_uv_attrib;\n\n\n\n\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\n\n\n\t// /globe/MAT/pointsParticles/constant_point_size\n\tfloat v_POLY_constant_point_size_val = 0.003;\n\t\n\t// /globe/MAT/pointsParticles/constant_point_size1\n\tfloat v_POLY_constant_point_size1_val = 0.011999999999999999;\n\t\n\t// /globe/MAT/pointsParticles/attribute1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tfloat v_POLY_attribute1_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).w;\n\t\n\t// /globe/MAT/pointsParticles/globals2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_globals2_position = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tv_POLY_globals2_uv = vec2(uv);\n\t\n\t// /globe/MAT/pointsParticles/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /globe/MAT/pointsParticles/mix1\n\tfloat v_POLY_mix1_mix = mix(v_POLY_constant_point_size_val, v_POLY_constant_point_size1_val, v_POLY_attribute1_val);\n\t\n\t// /globe/MAT/pointsParticles/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_globals2_uv);\n\t\n\t// /globe/MAT/pointsParticles/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_w = v_POLY_texture1_rgba.w;\n\t\n\t// /globe/MAT/pointsParticles/fitFrom01_1\n\tfloat v_POLY_fitFrom01_1_val = fitFrom01(v_POLY_vec4ToFloat1_w, 0.0, 1.0);\n\t\n\t// /globe/MAT/pointsParticles/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_mix1_mix * v_POLY_fitFrom01_1_val * 1.0);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 transformed = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tvec3 objectNormal = normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\tgl_PointSize = v_POLY_mult1_product * size * 10.0;\n\n\n\n\t#include <morphcolor_vertex>\n// removed:\n//\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n// removed:\n//\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
			"fragmentShader": "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n\n\n\n// /globe/MAT/pointsParticles/disk1\nfloat disk_feather(float dist, float radius, float feather){\n\tif(feather <= 0.0){\n\t\tif(dist < radius){return 1.0;}else{return 0.0;}\n\t} else {\n\t\tfloat half_feather = feather * 0.5;\n\t\tif(dist < (radius - half_feather)){\n\t\t\treturn 1.0;\n\t\t} else {\n\t\t\tif(dist > (radius + half_feather)){\n\t\t\t\treturn 0.0;\n\t\t\t} else {\n\t\t\t\tfloat feather_start = (radius - half_feather);\n\t\t\t\tfloat blend = 1.0 - (dist - feather_start) / feather;\n\t\t\t\treturn blend;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfloat disk2d(vec2 pos, vec2 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n// function could be called sphere, but is an overload of disk, and is the same\nfloat disk3d(vec3 pos, vec3 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute2\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n\n\n\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\n\n\t// /globe/MAT/pointsParticles/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).xyz;\n\t\n\t// /globe/MAT/pointsParticles/globals1\n\tvec2 v_POLY_globals1_gl_PointCoord = gl_PointCoord;\n\t\n\t// /globe/MAT/pointsParticles/disk1\n\tfloat v_POLY_disk1_float = disk2d(v_POLY_globals1_gl_PointCoord, vec2(0.5, 0.5), 0.23, 0.1);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tdiffuseColor.xyz = v_POLY_attribute2_val;\n\tdiffuseColor.a = v_POLY_disk1_float;\n\n\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
			"timeDependent": false,
			"resolutionDependent": false,
			"paramConfigs": [
				{
					"type": "node_path",
					"name": "texture1",
					"defaultValue": "",
					"uniformName": "v_POLY_texture_texture1"
				}
			]
		},
		"customMaterials": {
			"customDistanceMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/globe/MAT/pointsParticles-customDistanceMaterial",
					"type": "ShaderMaterial",
					"name": "customDistanceMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.04,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"uvTransform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"uv2Transform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"alphaMap": {
							"value": null
						},
						"alphaTest": {
							"value": 0.04
						},
						"displacementMap": {
							"value": null
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						},
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1,
						"DEPTH_PACKING": 3200
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\n// /globe/MAT/pointsParticles/fitFrom01_1\n//\n//\n// FIT\n//\n//\nfloat fit(float val, float srcMin, float srcMax, float destMin, float destMax){\n\tfloat src_range = srcMax - srcMin;\n\tfloat dest_range = destMax - destMin;\n\n\tfloat r = (val - srcMin) / src_range;\n\treturn (r * dest_range) + destMin;\n}\nvec2 fit(vec2 val, vec2 srcMin, vec2 srcMax, vec2 destMin, vec2 destMax){\n\treturn vec2(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y)\n\t);\n}\nvec3 fit(vec3 val, vec3 srcMin, vec3 srcMax, vec3 destMin, vec3 destMax){\n\treturn vec3(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z)\n\t);\n}\nvec4 fit(vec4 val, vec4 srcMin, vec4 srcMax, vec4 destMin, vec4 destMax){\n\treturn vec4(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z),\n\t\tfit(val.w, srcMin.w, srcMax.w, destMin.w, destMax.w)\n\t);\n}\n\n//\n//\n// FIT TO 01\n// fits the range [srcMin, srcMax] to [0, 1]\n//\nfloat fitTo01(float val, float srcMin, float srcMax){\n\tfloat size = srcMax - srcMin;\n\treturn (val - srcMin) / size;\n}\nvec2 fitTo01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitTo01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitTo01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z),\n\t\tfitTo01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01\n// fits the range [0, 1] to [destMin, destMax]\n//\nfloat fitFrom01(float val, float destMin, float destMax){\n\treturn fit(val, 0.0, 1.0, destMin, destMax);\n}\nvec2 fitFrom01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitFrom01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitFrom01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z),\n\t\tfitFrom01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01 TO VARIANCE\n// fits the range [0, 1] to [center - variance, center + variance]\n//\nfloat fitFrom01ToVariance(float val, float center, float variance){\n\treturn fitFrom01(val, center - variance, center + variance);\n}\nvec2 fitFrom01ToVariance(vec2 val, vec2 center, vec2 variance){\n\treturn vec2(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y)\n\t);\n}\nvec3 fitFrom01ToVariance(vec3 val, vec3 center, vec3 variance){\n\treturn vec3(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z)\n\t);\n}\nvec4 fitFrom01ToVariance(vec4 val, vec4 center, vec4 variance){\n\treturn vec4(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z),\n\t\tfitFrom01ToVariance(val.w, center.w, variance.w)\n\t);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute1\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/globals2\nuniform sampler2D texture_position;\n\n// /globe/MAT/pointsParticles/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n// /globe/MAT/pointsParticles/globals2\nvarying vec2 v_POLY_globals2_uv;\n\n// /globe/MAT/pointsParticles/attribute1\nattribute vec2 particles_sim_uv_attrib;\n\n\n\n\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /globe/MAT/pointsParticles/constant_point_size\n\tfloat v_POLY_constant_point_size_val = 0.003;\n\t\n\t// /globe/MAT/pointsParticles/constant_point_size1\n\tfloat v_POLY_constant_point_size1_val = 0.011999999999999999;\n\t\n\t// /globe/MAT/pointsParticles/attribute1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tfloat v_POLY_attribute1_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).w;\n\t\n\t// /globe/MAT/pointsParticles/globals2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_globals2_position = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tv_POLY_globals2_uv = vec2(uv);\n\t\n\t// /globe/MAT/pointsParticles/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /globe/MAT/pointsParticles/mix1\n\tfloat v_POLY_mix1_mix = mix(v_POLY_constant_point_size_val, v_POLY_constant_point_size1_val, v_POLY_attribute1_val);\n\t\n\t// /globe/MAT/pointsParticles/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_globals2_uv);\n\t\n\t// /globe/MAT/pointsParticles/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_w = v_POLY_texture1_rgba.w;\n\t\n\t// /globe/MAT/pointsParticles/fitFrom01_1\n\tfloat v_POLY_fitFrom01_1_val = fitFrom01(v_POLY_vec4ToFloat1_w, 0.0, 1.0);\n\t\n\t// /globe/MAT/pointsParticles/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_mix1_mix * v_POLY_fitFrom01_1_val * 1.0);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 transformed = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tvec3 objectNormal = normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\tgl_PointSize = v_POLY_mult1_product * size * 10.0;\n\n\n\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n\n// /globe/MAT/pointsParticles/disk1\nfloat disk_feather(float dist, float radius, float feather){\n\tif(feather <= 0.0){\n\t\tif(dist < radius){return 1.0;}else{return 0.0;}\n\t} else {\n\t\tfloat half_feather = feather * 0.5;\n\t\tif(dist < (radius - half_feather)){\n\t\t\treturn 1.0;\n\t\t} else {\n\t\t\tif(dist > (radius + half_feather)){\n\t\t\t\treturn 0.0;\n\t\t\t} else {\n\t\t\t\tfloat feather_start = (radius - half_feather);\n\t\t\t\tfloat blend = 1.0 - (dist - feather_start) / feather;\n\t\t\t\treturn blend;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfloat disk2d(vec2 pos, vec2 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n// function could be called sphere, but is an overload of disk, and is the same\nfloat disk3d(vec3 pos, vec3 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute2\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n\n\n\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\n\n\t// /globe/MAT/pointsParticles/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).xyz;\n\t\n\t// /globe/MAT/pointsParticles/globals1\n\tvec2 v_POLY_globals1_gl_PointCoord = gl_PointCoord;\n\t\n\t// /globe/MAT/pointsParticles/disk1\n\tfloat v_POLY_disk1_float = disk2d(v_POLY_globals1_gl_PointCoord, vec2(0.5, 0.5), 0.23, 0.1);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tdiffuseColor.xyz = v_POLY_attribute2_val;\n\tdiffuseColor.a = v_POLY_disk1_float;\n\n\n\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			},
			"customDepthMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/globe/MAT/pointsParticles-customDepthMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.04,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"uvTransform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"uv2Transform": {
							"type": "m3",
							"value": [
								1,
								0,
								0,
								0,
								1,
								0,
								0,
								0,
								1
							]
						},
						"alphaMap": {
							"value": null
						},
						"alphaTest": {
							"value": 0.04
						},
						"displacementMap": {
							"value": null
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						},
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1,
						"DEPTH_PACKING": 3201
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\n// /globe/MAT/pointsParticles/fitFrom01_1\n//\n//\n// FIT\n//\n//\nfloat fit(float val, float srcMin, float srcMax, float destMin, float destMax){\n\tfloat src_range = srcMax - srcMin;\n\tfloat dest_range = destMax - destMin;\n\n\tfloat r = (val - srcMin) / src_range;\n\treturn (r * dest_range) + destMin;\n}\nvec2 fit(vec2 val, vec2 srcMin, vec2 srcMax, vec2 destMin, vec2 destMax){\n\treturn vec2(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y)\n\t);\n}\nvec3 fit(vec3 val, vec3 srcMin, vec3 srcMax, vec3 destMin, vec3 destMax){\n\treturn vec3(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z)\n\t);\n}\nvec4 fit(vec4 val, vec4 srcMin, vec4 srcMax, vec4 destMin, vec4 destMax){\n\treturn vec4(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z),\n\t\tfit(val.w, srcMin.w, srcMax.w, destMin.w, destMax.w)\n\t);\n}\n\n//\n//\n// FIT TO 01\n// fits the range [srcMin, srcMax] to [0, 1]\n//\nfloat fitTo01(float val, float srcMin, float srcMax){\n\tfloat size = srcMax - srcMin;\n\treturn (val - srcMin) / size;\n}\nvec2 fitTo01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitTo01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitTo01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z),\n\t\tfitTo01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01\n// fits the range [0, 1] to [destMin, destMax]\n//\nfloat fitFrom01(float val, float destMin, float destMax){\n\treturn fit(val, 0.0, 1.0, destMin, destMax);\n}\nvec2 fitFrom01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitFrom01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitFrom01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z),\n\t\tfitFrom01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01 TO VARIANCE\n// fits the range [0, 1] to [center - variance, center + variance]\n//\nfloat fitFrom01ToVariance(float val, float center, float variance){\n\treturn fitFrom01(val, center - variance, center + variance);\n}\nvec2 fitFrom01ToVariance(vec2 val, vec2 center, vec2 variance){\n\treturn vec2(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y)\n\t);\n}\nvec3 fitFrom01ToVariance(vec3 val, vec3 center, vec3 variance){\n\treturn vec3(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z)\n\t);\n}\nvec4 fitFrom01ToVariance(vec4 val, vec4 center, vec4 variance){\n\treturn vec4(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z),\n\t\tfitFrom01ToVariance(val.w, center.w, variance.w)\n\t);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute1\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/globals2\nuniform sampler2D texture_position;\n\n// /globe/MAT/pointsParticles/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n// /globe/MAT/pointsParticles/globals2\nvarying vec2 v_POLY_globals2_uv;\n\n// /globe/MAT/pointsParticles/attribute1\nattribute vec2 particles_sim_uv_attrib;\n\n\n\n\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /globe/MAT/pointsParticles/constant_point_size\n\tfloat v_POLY_constant_point_size_val = 0.003;\n\t\n\t// /globe/MAT/pointsParticles/constant_point_size1\n\tfloat v_POLY_constant_point_size1_val = 0.011999999999999999;\n\t\n\t// /globe/MAT/pointsParticles/attribute1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tfloat v_POLY_attribute1_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).w;\n\t\n\t// /globe/MAT/pointsParticles/globals2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_globals2_position = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tv_POLY_globals2_uv = vec2(uv);\n\t\n\t// /globe/MAT/pointsParticles/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /globe/MAT/pointsParticles/mix1\n\tfloat v_POLY_mix1_mix = mix(v_POLY_constant_point_size_val, v_POLY_constant_point_size1_val, v_POLY_attribute1_val);\n\t\n\t// /globe/MAT/pointsParticles/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_globals2_uv);\n\t\n\t// /globe/MAT/pointsParticles/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_w = v_POLY_texture1_rgba.w;\n\t\n\t// /globe/MAT/pointsParticles/fitFrom01_1\n\tfloat v_POLY_fitFrom01_1_val = fitFrom01(v_POLY_vec4ToFloat1_w, 0.0, 1.0);\n\t\n\t// /globe/MAT/pointsParticles/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_mix1_mix * v_POLY_fitFrom01_1_val * 1.0);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 transformed = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tvec3 objectNormal = normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\tgl_PointSize = v_POLY_mult1_product * size * 10.0;\n\n\n\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n\n// /globe/MAT/pointsParticles/disk1\nfloat disk_feather(float dist, float radius, float feather){\n\tif(feather <= 0.0){\n\t\tif(dist < radius){return 1.0;}else{return 0.0;}\n\t} else {\n\t\tfloat half_feather = feather * 0.5;\n\t\tif(dist < (radius - half_feather)){\n\t\t\treturn 1.0;\n\t\t} else {\n\t\t\tif(dist > (radius + half_feather)){\n\t\t\t\treturn 0.0;\n\t\t\t} else {\n\t\t\t\tfloat feather_start = (radius - half_feather);\n\t\t\t\tfloat blend = 1.0 - (dist - feather_start) / feather;\n\t\t\t\treturn blend;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfloat disk2d(vec2 pos, vec2 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n// function could be called sphere, but is an overload of disk, and is the same\nfloat disk3d(vec3 pos, vec3 center, float radius, float feather){\n\tfloat dist = distance(pos, center);\n\treturn disk_feather(dist, radius, feather);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute2\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n\n\n\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\n\n\n\t// /globe/MAT/pointsParticles/attribute2\n\tvec3 v_POLY_attribute2_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).xyz;\n\t\n\t// /globe/MAT/pointsParticles/globals1\n\tvec2 v_POLY_globals1_gl_PointCoord = gl_PointCoord;\n\t\n\t// /globe/MAT/pointsParticles/disk1\n\tfloat v_POLY_disk1_float = disk2d(v_POLY_globals1_gl_PointCoord, vec2(0.5, 0.5), 0.23, 0.1);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tdiffuseColor.xyz = v_POLY_attribute2_val;\n\tdiffuseColor.a = v_POLY_disk1_float;\n\n\n\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			},
			"customDepthDOFMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/globe/MAT/pointsParticles-customDepthDOFMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthDOFMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.04,
					"glslVersion": null,
					"uniforms": {
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						},
						"mNear": {
							"value": 0
						},
						"mFar": {
							"value": 10
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n}\n",
					"fragmentShader": "\nuniform float mNear;\nuniform float mFar;\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\nvoid main() {\n\n\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\tvec4 diffuseColor = gl_FragColor;\n\n\t// INSERT BODY\n\n\tgl_FragColor.a = diffuseColor.a;\n}\n",
					"lights": false
				},
				"onBeforeCompileDataJSON": {
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\n// /globe/MAT/pointsParticles/fitFrom01_1\n//\n//\n// FIT\n//\n//\nfloat fit(float val, float srcMin, float srcMax, float destMin, float destMax){\n\tfloat src_range = srcMax - srcMin;\n\tfloat dest_range = destMax - destMin;\n\n\tfloat r = (val - srcMin) / src_range;\n\treturn (r * dest_range) + destMin;\n}\nvec2 fit(vec2 val, vec2 srcMin, vec2 srcMax, vec2 destMin, vec2 destMax){\n\treturn vec2(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y)\n\t);\n}\nvec3 fit(vec3 val, vec3 srcMin, vec3 srcMax, vec3 destMin, vec3 destMax){\n\treturn vec3(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z)\n\t);\n}\nvec4 fit(vec4 val, vec4 srcMin, vec4 srcMax, vec4 destMin, vec4 destMax){\n\treturn vec4(\n\t\tfit(val.x, srcMin.x, srcMax.x, destMin.x, destMax.x),\n\t\tfit(val.y, srcMin.y, srcMax.y, destMin.y, destMax.y),\n\t\tfit(val.z, srcMin.z, srcMax.z, destMin.z, destMax.z),\n\t\tfit(val.w, srcMin.w, srcMax.w, destMin.w, destMax.w)\n\t);\n}\n\n//\n//\n// FIT TO 01\n// fits the range [srcMin, srcMax] to [0, 1]\n//\nfloat fitTo01(float val, float srcMin, float srcMax){\n\tfloat size = srcMax - srcMin;\n\treturn (val - srcMin) / size;\n}\nvec2 fitTo01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitTo01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitTo01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitTo01(val.x, srcMin.x, srcMax.x),\n\t\tfitTo01(val.y, srcMin.y, srcMax.y),\n\t\tfitTo01(val.z, srcMin.z, srcMax.z),\n\t\tfitTo01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01\n// fits the range [0, 1] to [destMin, destMax]\n//\nfloat fitFrom01(float val, float destMin, float destMax){\n\treturn fit(val, 0.0, 1.0, destMin, destMax);\n}\nvec2 fitFrom01(vec2 val, vec2 srcMin, vec2 srcMax){\n\treturn vec2(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y)\n\t);\n}\nvec3 fitFrom01(vec3 val, vec3 srcMin, vec3 srcMax){\n\treturn vec3(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z)\n\t);\n}\nvec4 fitFrom01(vec4 val, vec4 srcMin, vec4 srcMax){\n\treturn vec4(\n\t\tfitFrom01(val.x, srcMin.x, srcMax.x),\n\t\tfitFrom01(val.y, srcMin.y, srcMax.y),\n\t\tfitFrom01(val.z, srcMin.z, srcMax.z),\n\t\tfitFrom01(val.w, srcMin.w, srcMax.w)\n\t);\n}\n\n//\n//\n// FIT FROM 01 TO VARIANCE\n// fits the range [0, 1] to [center - variance, center + variance]\n//\nfloat fitFrom01ToVariance(float val, float center, float variance){\n\treturn fitFrom01(val, center - variance, center + variance);\n}\nvec2 fitFrom01ToVariance(vec2 val, vec2 center, vec2 variance){\n\treturn vec2(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y)\n\t);\n}\nvec3 fitFrom01ToVariance(vec3 val, vec3 center, vec3 variance){\n\treturn vec3(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z)\n\t);\n}\nvec4 fitFrom01ToVariance(vec4 val, vec4 center, vec4 variance){\n\treturn vec4(\n\t\tfitFrom01ToVariance(val.x, center.x, variance.x),\n\t\tfitFrom01ToVariance(val.y, center.y, variance.y),\n\t\tfitFrom01ToVariance(val.z, center.z, variance.z),\n\t\tfitFrom01ToVariance(val.w, center.w, variance.w)\n\t);\n}\n\n\n\n\n\n\n\n// /globe/MAT/pointsParticles/attribute1\nuniform sampler2D texture_basecolor_SEPARATOR_hovered;\n\n// /globe/MAT/pointsParticles/globals2\nuniform sampler2D texture_position;\n\n// /globe/MAT/pointsParticles/texture1\nuniform sampler2D v_POLY_texture_texture1;\n\n// /globe/MAT/pointsParticles/attribute1\nvarying vec2 particles_sim_uv_varying;\n\n// /globe/MAT/pointsParticles/globals2\nvarying vec2 v_POLY_globals2_uv;\n\n// /globe/MAT/pointsParticles/attribute1\nattribute vec2 particles_sim_uv_attrib;\n\n\n\n\n\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\n\t// /globe/MAT/pointsParticles/constant_point_size\n\tfloat v_POLY_constant_point_size_val = 0.003;\n\t\n\t// /globe/MAT/pointsParticles/constant_point_size1\n\tfloat v_POLY_constant_point_size1_val = 0.011999999999999999;\n\t\n\t// /globe/MAT/pointsParticles/attribute1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tfloat v_POLY_attribute1_val = texture2D( texture_basecolor_SEPARATOR_hovered, particles_sim_uv_varying ).w;\n\t\n\t// /globe/MAT/pointsParticles/globals2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 v_POLY_globals2_position = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tv_POLY_globals2_uv = vec2(uv);\n\t\n\t// /globe/MAT/pointsParticles/attribute2\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\t\n\t// /globe/MAT/pointsParticles/mix1\n\tfloat v_POLY_mix1_mix = mix(v_POLY_constant_point_size_val, v_POLY_constant_point_size1_val, v_POLY_attribute1_val);\n\t\n\t// /globe/MAT/pointsParticles/texture1\n\tvec4 v_POLY_texture1_rgba = texture2D(v_POLY_texture_texture1, v_POLY_globals2_uv);\n\t\n\t// /globe/MAT/pointsParticles/vec4ToFloat1\n\tfloat v_POLY_vec4ToFloat1_w = v_POLY_texture1_rgba.w;\n\t\n\t// /globe/MAT/pointsParticles/fitFrom01_1\n\tfloat v_POLY_fitFrom01_1_val = fitFrom01(v_POLY_vec4ToFloat1_w, 0.0, 1.0);\n\t\n\t// /globe/MAT/pointsParticles/mult1\n\tfloat v_POLY_mult1_product = (v_POLY_mix1_mix * v_POLY_fitFrom01_1_val * 1.0);\n\t\n\t// /globe/MAT/pointsParticles/output1\n\tparticles_sim_uv_varying = particles_sim_uv_attrib;\n\tvec3 transformed = texture2D( texture_position, particles_sim_uv_varying ).xyz;\n\tvec3 objectNormal = normal;\n\t#ifdef USE_TANGENT\n\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t#endif\n\tgl_PointSize = v_POLY_mult1_product * size * 10.0;\n\n\n\n\n\n\t#include <project_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n}\n",
					"fragmentShader": "\nuniform float mNear;\nuniform float mFar;\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\nvoid main() {\n\n\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\tvec4 diffuseColor = gl_FragColor;\n\n\t// INSERT BODY\n\n\tgl_FragColor.a = diffuseColor.a;\n}\n",
					"timeDependent": false,
					"resolutionDependent": false,
					"paramConfigs": [
						{
							"type": "node_path",
							"name": "texture1",
							"defaultValue": "",
							"uniformName": "v_POLY_texture_texture1"
						}
					]
				}
			}
		}
	}
}